# Problem 12
# Highly Divisible Triangular Number
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import math
import itertools

target = 500

i = 1

def primeFactors(number):
    original = number
    factors = []
    while True:
        if number % 2 == 0:
            factors.append(2)
            number /= 2
        else:
            break
    for i in range(3, math.ceil(math.sqrt(number)) + 1, 2):
        while True:
            if number % i == 0:
                factors.append(i)
                number /= i
            else:
                break
    if len(factors) == 0:
        factors.append(original)
    return factors

while True:
    factors = primeFactors(i) + primeFactors(i+1)
    factors.remove(2)

    allFactors = []

    for j in range(len(factors)+1):
        for item in list(itertools.combinations(factors, j)):
            product = 1
            for number in item:
                product *= number
            allFactors.append(product)

    allFactors = list(dict.fromkeys(allFactors))

    if len(allFactors) >= target:
        break
    i += 1

answer = allFactors[-1]
print(answer)

# 76576500